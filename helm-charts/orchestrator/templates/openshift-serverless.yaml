## Knative Serving CR
{{- define "knativeServing-manifest" -}}
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: knative-serving
  namespace: knative-serving
  annotations:
    "meta.helm.sh/release-name": {{ .Release.Name}}
spec:
  controller-custom-certs:
    name: ""
    type: ""
  registry: {}
{{- end }}
## Knative Eventing CR
{{- define "knativeEventing-manifest" -}}
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeEventing
metadata:
  name: knative-eventing
  namespace: knative-eventing
  annotations:
    "meta.helm.sh/release-name": {{ .Release.Name}}
spec:
  Registry:
{{- end }}
#### Openshift Serverless Manifests
{{- if .Values.serverlessOperator.enabled }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" .Values.serverlessOperator.subscription.namespace .Release.Name .Capabilities.APIVersions) }}
  {{- if and (eq $unmanagedNamespaceExists "false") .Values.serverlessOperator.enabled }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.serverlessOperator.subscription.namespace }}
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: serverless-operator-group
  namespace: {{ .Values.serverlessOperator.subscription.namespace }}
spec: {}
  {{- end }}
  {{- $unmanagedSubscriptionExists := include "unmanaged-resource-exists" (list "operators.coreos.com/v1alpha1" "Subscription" .Values.serverlessOperator.subscription.namespace "serverless-operator" .Release.Name .Capabilities.APIVersions ) }}
  {{- if eq $unmanagedSubscriptionExists "false" }}
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: serverless-operator
  namespace: {{ .Values.serverlessOperator.subscription.namespace }}
spec:
  channel: {{ .Values.serverlessOperator.subscription.channel }}
  installPlanApproval: Automatic
  name: {{ .Values.serverlessOperator.subscription.name }}
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  {{- end }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" "knative-serving" .Release.Name .Capabilities.APIVersions) }}
  {{- if eq $unmanagedNamespaceExists "false" }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-serving
  {{- end }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" "knative-eventing" .Release.Name .Capabilities.APIVersions) }}
  {{- if eq $unmanagedNamespaceExists "false" }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-eventing
  {{- end }}
{{- end }}
{{- $unmanagedKnativeEventingExists := include "unmanaged-resource-exists" (list "operator.knative.dev/v1beta1" "KnativeEventing" "knative-eventing" "knative-eventing" .Release.Name .Capabilities.APIVersions) }}
{{- if eq $unmanagedKnativeEventingExists "false" }}
  {{- include "manage-cr-lifecycle-on-action" (dict "release" .Release "apiGroup" "operator.knative.dev" "groupVersion" "v1beta1" "kind" "KnativeEventing" "kinds" "knativeeventings" "targetNamespace" "knative-eventing" "resourceName" "knative-eventing" "isEnabled" .Values.serverlessOperator.enabled  "hasCRDInstalled" (.Capabilities.APIVersions.Has "operator.knative.dev/v1beta1/KnativeEventing") "manifest" (include "knativeEventing-manifest" . | b64enc )) }}
{{- end }}
{{- $unmanagedKnativeEventingExists := include "unmanaged-resource-exists" (list "operator.knative.dev/v1beta1" "KnativeServing" "knative-serving" "knative-serving" .Release.Name .Capabilities.APIVersions) }}
{{- if eq $unmanagedKnativeEventingExists "false" }}
  {{- include "manage-cr-lifecycle-on-action" (dict "release" .Release "apiGroup" "operator.knative.dev" "groupVersion" "v1beta1" "kind" "KnativeServing" "kinds" "knativeservings" "targetNamespace" "knative-serving" "resourceName" "knative-serving" "isEnabled" .Values.serverlessOperator.enabled "hasCRDInstalled" (.Capabilities.APIVersions.Has "operator.knative.dev/v1beta1/KnativeServing") "manifest" (include "knativeServing-manifest" . | b64enc )) }}
{{- end }}